// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: files/PlayCardReqMsg.proto

package com.sy599.game.msg.serverPacket;

public final class PlayCardReqMsg {
  private PlayCardReqMsg() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface PlayCardReqOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 cardIds = 1;
    /**
     * <code>repeated int32 cardIds = 1;</code>
     *
     * <pre>
     *牌组id
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardIdsList();
    /**
     * <code>repeated int32 cardIds = 1;</code>
     *
     * <pre>
     *牌组id
     * </pre>
     */
    int getCardIdsCount();
    /**
     * <code>repeated int32 cardIds = 1;</code>
     *
     * <pre>
     *牌组id
     * </pre>
     */
    int getCardIds(int index);

    // optional int32 cardType = 2;
    /**
     * <code>optional int32 cardType = 2;</code>
     *
     * <pre>
     *牌型
     * </pre>
     */
    boolean hasCardType();
    /**
     * <code>optional int32 cardType = 2;</code>
     *
     * <pre>
     *牌型
     * </pre>
     */
    int getCardType();

    // repeated int32 extCardIds = 3;
    /**
     * <code>repeated int32 extCardIds = 3;</code>
     *
     * <pre>
     *牌组id
     * </pre>
     */
    java.util.List<java.lang.Integer> getExtCardIdsList();
    /**
     * <code>repeated int32 extCardIds = 3;</code>
     *
     * <pre>
     *牌组id
     * </pre>
     */
    int getExtCardIdsCount();
    /**
     * <code>repeated int32 extCardIds = 3;</code>
     *
     * <pre>
     *牌组id
     * </pre>
     */
    int getExtCardIds(int index);
  }
  /**
   * Protobuf type {@code com.sy599.game.msg.serverPacket.PlayCardReq}
   *
   * <pre>
   *聊天
   * </pre>
   */
  public static final class PlayCardReq extends
      com.google.protobuf.GeneratedMessage
      implements PlayCardReqOrBuilder {
    // Use PlayCardReq.newBuilder() to construct.
    private PlayCardReq(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PlayCardReq(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PlayCardReq defaultInstance;
    public static PlayCardReq getDefaultInstance() {
      return defaultInstance;
    }

    public PlayCardReq getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PlayCardReq(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                cardIds_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              cardIds_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                cardIds_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardIds_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              cardType_ = input.readInt32();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                extCardIds_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              extCardIds_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                extCardIds_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                extCardIds_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          cardIds_ = java.util.Collections.unmodifiableList(cardIds_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          extCardIds_ = java.util.Collections.unmodifiableList(extCardIds_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sy599.game.msg.serverPacket.PlayCardReqMsg.internal_static_com_sy599_game_msg_serverPacket_PlayCardReq_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sy599.game.msg.serverPacket.PlayCardReqMsg.internal_static_com_sy599_game_msg_serverPacket_PlayCardReq_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sy599.game.msg.serverPacket.PlayCardReqMsg.PlayCardReq.class, com.sy599.game.msg.serverPacket.PlayCardReqMsg.PlayCardReq.Builder.class);
    }

    public static com.google.protobuf.Parser<PlayCardReq> PARSER =
        new com.google.protobuf.AbstractParser<PlayCardReq>() {
      public PlayCardReq parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PlayCardReq(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PlayCardReq> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated int32 cardIds = 1;
    public static final int CARDIDS_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> cardIds_;
    /**
     * <code>repeated int32 cardIds = 1;</code>
     *
     * <pre>
     *牌组id
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardIdsList() {
      return cardIds_;
    }
    /**
     * <code>repeated int32 cardIds = 1;</code>
     *
     * <pre>
     *牌组id
     * </pre>
     */
    public int getCardIdsCount() {
      return cardIds_.size();
    }
    /**
     * <code>repeated int32 cardIds = 1;</code>
     *
     * <pre>
     *牌组id
     * </pre>
     */
    public int getCardIds(int index) {
      return cardIds_.get(index);
    }

    // optional int32 cardType = 2;
    public static final int CARDTYPE_FIELD_NUMBER = 2;
    private int cardType_;
    /**
     * <code>optional int32 cardType = 2;</code>
     *
     * <pre>
     *牌型
     * </pre>
     */
    public boolean hasCardType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 cardType = 2;</code>
     *
     * <pre>
     *牌型
     * </pre>
     */
    public int getCardType() {
      return cardType_;
    }

    // repeated int32 extCardIds = 3;
    public static final int EXTCARDIDS_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> extCardIds_;
    /**
     * <code>repeated int32 extCardIds = 3;</code>
     *
     * <pre>
     *牌组id
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getExtCardIdsList() {
      return extCardIds_;
    }
    /**
     * <code>repeated int32 extCardIds = 3;</code>
     *
     * <pre>
     *牌组id
     * </pre>
     */
    public int getExtCardIdsCount() {
      return extCardIds_.size();
    }
    /**
     * <code>repeated int32 extCardIds = 3;</code>
     *
     * <pre>
     *牌组id
     * </pre>
     */
    public int getExtCardIds(int index) {
      return extCardIds_.get(index);
    }

    private void initFields() {
      cardIds_ = java.util.Collections.emptyList();
      cardType_ = 0;
      extCardIds_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < cardIds_.size(); i++) {
        output.writeInt32(1, cardIds_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, cardType_);
      }
      for (int i = 0; i < extCardIds_.size(); i++) {
        output.writeInt32(3, extCardIds_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < cardIds_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardIds_.get(i));
        }
        size += dataSize;
        size += 1 * getCardIdsList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, cardType_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < extCardIds_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(extCardIds_.get(i));
        }
        size += dataSize;
        size += 1 * getExtCardIdsList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.sy599.game.msg.serverPacket.PlayCardReqMsg.PlayCardReq parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sy599.game.msg.serverPacket.PlayCardReqMsg.PlayCardReq parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sy599.game.msg.serverPacket.PlayCardReqMsg.PlayCardReq parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sy599.game.msg.serverPacket.PlayCardReqMsg.PlayCardReq parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sy599.game.msg.serverPacket.PlayCardReqMsg.PlayCardReq parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.sy599.game.msg.serverPacket.PlayCardReqMsg.PlayCardReq parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.sy599.game.msg.serverPacket.PlayCardReqMsg.PlayCardReq parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.sy599.game.msg.serverPacket.PlayCardReqMsg.PlayCardReq parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.sy599.game.msg.serverPacket.PlayCardReqMsg.PlayCardReq parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.sy599.game.msg.serverPacket.PlayCardReqMsg.PlayCardReq parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.sy599.game.msg.serverPacket.PlayCardReqMsg.PlayCardReq prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.sy599.game.msg.serverPacket.PlayCardReq}
     *
     * <pre>
     *聊天
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.sy599.game.msg.serverPacket.PlayCardReqMsg.PlayCardReqOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sy599.game.msg.serverPacket.PlayCardReqMsg.internal_static_com_sy599_game_msg_serverPacket_PlayCardReq_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sy599.game.msg.serverPacket.PlayCardReqMsg.internal_static_com_sy599_game_msg_serverPacket_PlayCardReq_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sy599.game.msg.serverPacket.PlayCardReqMsg.PlayCardReq.class, com.sy599.game.msg.serverPacket.PlayCardReqMsg.PlayCardReq.Builder.class);
      }

      // Construct using com.sy599.game.msg.serverPacket.PlayCardReqMsg.PlayCardReq.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cardIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        cardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        extCardIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sy599.game.msg.serverPacket.PlayCardReqMsg.internal_static_com_sy599_game_msg_serverPacket_PlayCardReq_descriptor;
      }

      public com.sy599.game.msg.serverPacket.PlayCardReqMsg.PlayCardReq getDefaultInstanceForType() {
        return com.sy599.game.msg.serverPacket.PlayCardReqMsg.PlayCardReq.getDefaultInstance();
      }

      public com.sy599.game.msg.serverPacket.PlayCardReqMsg.PlayCardReq build() {
        com.sy599.game.msg.serverPacket.PlayCardReqMsg.PlayCardReq result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.sy599.game.msg.serverPacket.PlayCardReqMsg.PlayCardReq buildPartial() {
        com.sy599.game.msg.serverPacket.PlayCardReqMsg.PlayCardReq result = new com.sy599.game.msg.serverPacket.PlayCardReqMsg.PlayCardReq(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          cardIds_ = java.util.Collections.unmodifiableList(cardIds_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.cardIds_ = cardIds_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.cardType_ = cardType_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          extCardIds_ = java.util.Collections.unmodifiableList(extCardIds_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.extCardIds_ = extCardIds_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sy599.game.msg.serverPacket.PlayCardReqMsg.PlayCardReq) {
          return mergeFrom((com.sy599.game.msg.serverPacket.PlayCardReqMsg.PlayCardReq)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sy599.game.msg.serverPacket.PlayCardReqMsg.PlayCardReq other) {
        if (other == com.sy599.game.msg.serverPacket.PlayCardReqMsg.PlayCardReq.getDefaultInstance()) return this;
        if (!other.cardIds_.isEmpty()) {
          if (cardIds_.isEmpty()) {
            cardIds_ = other.cardIds_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCardIdsIsMutable();
            cardIds_.addAll(other.cardIds_);
          }
          onChanged();
        }
        if (other.hasCardType()) {
          setCardType(other.getCardType());
        }
        if (!other.extCardIds_.isEmpty()) {
          if (extCardIds_.isEmpty()) {
            extCardIds_ = other.extCardIds_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureExtCardIdsIsMutable();
            extCardIds_.addAll(other.extCardIds_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.sy599.game.msg.serverPacket.PlayCardReqMsg.PlayCardReq parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.sy599.game.msg.serverPacket.PlayCardReqMsg.PlayCardReq) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 cardIds = 1;
      private java.util.List<java.lang.Integer> cardIds_ = java.util.Collections.emptyList();
      private void ensureCardIdsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          cardIds_ = new java.util.ArrayList<java.lang.Integer>(cardIds_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 cardIds = 1;</code>
       *
       * <pre>
       *牌组id
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardIdsList() {
        return java.util.Collections.unmodifiableList(cardIds_);
      }
      /**
       * <code>repeated int32 cardIds = 1;</code>
       *
       * <pre>
       *牌组id
       * </pre>
       */
      public int getCardIdsCount() {
        return cardIds_.size();
      }
      /**
       * <code>repeated int32 cardIds = 1;</code>
       *
       * <pre>
       *牌组id
       * </pre>
       */
      public int getCardIds(int index) {
        return cardIds_.get(index);
      }
      /**
       * <code>repeated int32 cardIds = 1;</code>
       *
       * <pre>
       *牌组id
       * </pre>
       */
      public Builder setCardIds(
          int index, int value) {
        ensureCardIdsIsMutable();
        cardIds_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cardIds = 1;</code>
       *
       * <pre>
       *牌组id
       * </pre>
       */
      public Builder addCardIds(int value) {
        ensureCardIdsIsMutable();
        cardIds_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cardIds = 1;</code>
       *
       * <pre>
       *牌组id
       * </pre>
       */
      public Builder addAllCardIds(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardIdsIsMutable();
        super.addAll(values, cardIds_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cardIds = 1;</code>
       *
       * <pre>
       *牌组id
       * </pre>
       */
      public Builder clearCardIds() {
        cardIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // optional int32 cardType = 2;
      private int cardType_ ;
      /**
       * <code>optional int32 cardType = 2;</code>
       *
       * <pre>
       *牌型
       * </pre>
       */
      public boolean hasCardType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 cardType = 2;</code>
       *
       * <pre>
       *牌型
       * </pre>
       */
      public int getCardType() {
        return cardType_;
      }
      /**
       * <code>optional int32 cardType = 2;</code>
       *
       * <pre>
       *牌型
       * </pre>
       */
      public Builder setCardType(int value) {
        bitField0_ |= 0x00000002;
        cardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cardType = 2;</code>
       *
       * <pre>
       *牌型
       * </pre>
       */
      public Builder clearCardType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        cardType_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 extCardIds = 3;
      private java.util.List<java.lang.Integer> extCardIds_ = java.util.Collections.emptyList();
      private void ensureExtCardIdsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          extCardIds_ = new java.util.ArrayList<java.lang.Integer>(extCardIds_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 extCardIds = 3;</code>
       *
       * <pre>
       *牌组id
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getExtCardIdsList() {
        return java.util.Collections.unmodifiableList(extCardIds_);
      }
      /**
       * <code>repeated int32 extCardIds = 3;</code>
       *
       * <pre>
       *牌组id
       * </pre>
       */
      public int getExtCardIdsCount() {
        return extCardIds_.size();
      }
      /**
       * <code>repeated int32 extCardIds = 3;</code>
       *
       * <pre>
       *牌组id
       * </pre>
       */
      public int getExtCardIds(int index) {
        return extCardIds_.get(index);
      }
      /**
       * <code>repeated int32 extCardIds = 3;</code>
       *
       * <pre>
       *牌组id
       * </pre>
       */
      public Builder setExtCardIds(
          int index, int value) {
        ensureExtCardIdsIsMutable();
        extCardIds_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 extCardIds = 3;</code>
       *
       * <pre>
       *牌组id
       * </pre>
       */
      public Builder addExtCardIds(int value) {
        ensureExtCardIdsIsMutable();
        extCardIds_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 extCardIds = 3;</code>
       *
       * <pre>
       *牌组id
       * </pre>
       */
      public Builder addAllExtCardIds(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureExtCardIdsIsMutable();
        super.addAll(values, extCardIds_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 extCardIds = 3;</code>
       *
       * <pre>
       *牌组id
       * </pre>
       */
      public Builder clearExtCardIds() {
        extCardIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.sy599.game.msg.serverPacket.PlayCardReq)
    }

    static {
      defaultInstance = new PlayCardReq(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.sy599.game.msg.serverPacket.PlayCardReq)
  }

  public interface BJPlayCardReqOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 cardIds = 1;
    /**
     * <code>repeated int32 cardIds = 1;</code>
     *
     * <pre>
     *牌组id(如果是摆叫操作 第一个是打出的牌 后面的是摆叫的牌)
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardIdsList();
    /**
     * <code>repeated int32 cardIds = 1;</code>
     *
     * <pre>
     *牌组id(如果是摆叫操作 第一个是打出的牌 后面的是摆叫的牌)
     * </pre>
     */
    int getCardIdsCount();
    /**
     * <code>repeated int32 cardIds = 1;</code>
     *
     * <pre>
     *牌组id(如果是摆叫操作 第一个是打出的牌 后面的是摆叫的牌)
     * </pre>
     */
    int getCardIds(int index);

    // optional int32 cardType = 2;
    /**
     * <code>optional int32 cardType = 2;</code>
     *
     * <pre>
     *牌型
     * </pre>
     */
    boolean hasCardType();
    /**
     * <code>optional int32 cardType = 2;</code>
     *
     * <pre>
     *牌型
     * </pre>
     */
    int getCardType();

    // repeated int32 huCardIds = 3;
    /**
     * <code>repeated int32 huCardIds = 3;</code>
     *
     * <pre>
     *摆叫胡的牌组值(禁牌牌组)
     * </pre>
     */
    java.util.List<java.lang.Integer> getHuCardIdsList();
    /**
     * <code>repeated int32 huCardIds = 3;</code>
     *
     * <pre>
     *摆叫胡的牌组值(禁牌牌组)
     * </pre>
     */
    int getHuCardIdsCount();
    /**
     * <code>repeated int32 huCardIds = 3;</code>
     *
     * <pre>
     *摆叫胡的牌组值(禁牌牌组)
     * </pre>
     */
    int getHuCardIds(int index);
  }
  /**
   * Protobuf type {@code com.sy599.game.msg.serverPacket.BJPlayCardReq}
   */
  public static final class BJPlayCardReq extends
      com.google.protobuf.GeneratedMessage
      implements BJPlayCardReqOrBuilder {
    // Use BJPlayCardReq.newBuilder() to construct.
    private BJPlayCardReq(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private BJPlayCardReq(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final BJPlayCardReq defaultInstance;
    public static BJPlayCardReq getDefaultInstance() {
      return defaultInstance;
    }

    public BJPlayCardReq getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private BJPlayCardReq(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                cardIds_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              cardIds_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                cardIds_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardIds_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              cardType_ = input.readInt32();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                huCardIds_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              huCardIds_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                huCardIds_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                huCardIds_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          cardIds_ = java.util.Collections.unmodifiableList(cardIds_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          huCardIds_ = java.util.Collections.unmodifiableList(huCardIds_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sy599.game.msg.serverPacket.PlayCardReqMsg.internal_static_com_sy599_game_msg_serverPacket_BJPlayCardReq_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sy599.game.msg.serverPacket.PlayCardReqMsg.internal_static_com_sy599_game_msg_serverPacket_BJPlayCardReq_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sy599.game.msg.serverPacket.PlayCardReqMsg.BJPlayCardReq.class, com.sy599.game.msg.serverPacket.PlayCardReqMsg.BJPlayCardReq.Builder.class);
    }

    public static com.google.protobuf.Parser<BJPlayCardReq> PARSER =
        new com.google.protobuf.AbstractParser<BJPlayCardReq>() {
      public BJPlayCardReq parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BJPlayCardReq(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<BJPlayCardReq> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated int32 cardIds = 1;
    public static final int CARDIDS_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> cardIds_;
    /**
     * <code>repeated int32 cardIds = 1;</code>
     *
     * <pre>
     *牌组id(如果是摆叫操作 第一个是打出的牌 后面的是摆叫的牌)
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardIdsList() {
      return cardIds_;
    }
    /**
     * <code>repeated int32 cardIds = 1;</code>
     *
     * <pre>
     *牌组id(如果是摆叫操作 第一个是打出的牌 后面的是摆叫的牌)
     * </pre>
     */
    public int getCardIdsCount() {
      return cardIds_.size();
    }
    /**
     * <code>repeated int32 cardIds = 1;</code>
     *
     * <pre>
     *牌组id(如果是摆叫操作 第一个是打出的牌 后面的是摆叫的牌)
     * </pre>
     */
    public int getCardIds(int index) {
      return cardIds_.get(index);
    }

    // optional int32 cardType = 2;
    public static final int CARDTYPE_FIELD_NUMBER = 2;
    private int cardType_;
    /**
     * <code>optional int32 cardType = 2;</code>
     *
     * <pre>
     *牌型
     * </pre>
     */
    public boolean hasCardType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 cardType = 2;</code>
     *
     * <pre>
     *牌型
     * </pre>
     */
    public int getCardType() {
      return cardType_;
    }

    // repeated int32 huCardIds = 3;
    public static final int HUCARDIDS_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> huCardIds_;
    /**
     * <code>repeated int32 huCardIds = 3;</code>
     *
     * <pre>
     *摆叫胡的牌组值(禁牌牌组)
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getHuCardIdsList() {
      return huCardIds_;
    }
    /**
     * <code>repeated int32 huCardIds = 3;</code>
     *
     * <pre>
     *摆叫胡的牌组值(禁牌牌组)
     * </pre>
     */
    public int getHuCardIdsCount() {
      return huCardIds_.size();
    }
    /**
     * <code>repeated int32 huCardIds = 3;</code>
     *
     * <pre>
     *摆叫胡的牌组值(禁牌牌组)
     * </pre>
     */
    public int getHuCardIds(int index) {
      return huCardIds_.get(index);
    }

    private void initFields() {
      cardIds_ = java.util.Collections.emptyList();
      cardType_ = 0;
      huCardIds_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < cardIds_.size(); i++) {
        output.writeInt32(1, cardIds_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, cardType_);
      }
      for (int i = 0; i < huCardIds_.size(); i++) {
        output.writeInt32(3, huCardIds_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < cardIds_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardIds_.get(i));
        }
        size += dataSize;
        size += 1 * getCardIdsList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, cardType_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < huCardIds_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(huCardIds_.get(i));
        }
        size += dataSize;
        size += 1 * getHuCardIdsList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.sy599.game.msg.serverPacket.PlayCardReqMsg.BJPlayCardReq parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sy599.game.msg.serverPacket.PlayCardReqMsg.BJPlayCardReq parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sy599.game.msg.serverPacket.PlayCardReqMsg.BJPlayCardReq parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sy599.game.msg.serverPacket.PlayCardReqMsg.BJPlayCardReq parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sy599.game.msg.serverPacket.PlayCardReqMsg.BJPlayCardReq parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.sy599.game.msg.serverPacket.PlayCardReqMsg.BJPlayCardReq parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.sy599.game.msg.serverPacket.PlayCardReqMsg.BJPlayCardReq parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.sy599.game.msg.serverPacket.PlayCardReqMsg.BJPlayCardReq parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.sy599.game.msg.serverPacket.PlayCardReqMsg.BJPlayCardReq parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.sy599.game.msg.serverPacket.PlayCardReqMsg.BJPlayCardReq parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.sy599.game.msg.serverPacket.PlayCardReqMsg.BJPlayCardReq prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.sy599.game.msg.serverPacket.BJPlayCardReq}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.sy599.game.msg.serverPacket.PlayCardReqMsg.BJPlayCardReqOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sy599.game.msg.serverPacket.PlayCardReqMsg.internal_static_com_sy599_game_msg_serverPacket_BJPlayCardReq_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sy599.game.msg.serverPacket.PlayCardReqMsg.internal_static_com_sy599_game_msg_serverPacket_BJPlayCardReq_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sy599.game.msg.serverPacket.PlayCardReqMsg.BJPlayCardReq.class, com.sy599.game.msg.serverPacket.PlayCardReqMsg.BJPlayCardReq.Builder.class);
      }

      // Construct using com.sy599.game.msg.serverPacket.PlayCardReqMsg.BJPlayCardReq.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cardIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        cardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        huCardIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sy599.game.msg.serverPacket.PlayCardReqMsg.internal_static_com_sy599_game_msg_serverPacket_BJPlayCardReq_descriptor;
      }

      public com.sy599.game.msg.serverPacket.PlayCardReqMsg.BJPlayCardReq getDefaultInstanceForType() {
        return com.sy599.game.msg.serverPacket.PlayCardReqMsg.BJPlayCardReq.getDefaultInstance();
      }

      public com.sy599.game.msg.serverPacket.PlayCardReqMsg.BJPlayCardReq build() {
        com.sy599.game.msg.serverPacket.PlayCardReqMsg.BJPlayCardReq result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.sy599.game.msg.serverPacket.PlayCardReqMsg.BJPlayCardReq buildPartial() {
        com.sy599.game.msg.serverPacket.PlayCardReqMsg.BJPlayCardReq result = new com.sy599.game.msg.serverPacket.PlayCardReqMsg.BJPlayCardReq(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          cardIds_ = java.util.Collections.unmodifiableList(cardIds_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.cardIds_ = cardIds_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.cardType_ = cardType_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          huCardIds_ = java.util.Collections.unmodifiableList(huCardIds_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.huCardIds_ = huCardIds_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sy599.game.msg.serverPacket.PlayCardReqMsg.BJPlayCardReq) {
          return mergeFrom((com.sy599.game.msg.serverPacket.PlayCardReqMsg.BJPlayCardReq)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sy599.game.msg.serverPacket.PlayCardReqMsg.BJPlayCardReq other) {
        if (other == com.sy599.game.msg.serverPacket.PlayCardReqMsg.BJPlayCardReq.getDefaultInstance()) return this;
        if (!other.cardIds_.isEmpty()) {
          if (cardIds_.isEmpty()) {
            cardIds_ = other.cardIds_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCardIdsIsMutable();
            cardIds_.addAll(other.cardIds_);
          }
          onChanged();
        }
        if (other.hasCardType()) {
          setCardType(other.getCardType());
        }
        if (!other.huCardIds_.isEmpty()) {
          if (huCardIds_.isEmpty()) {
            huCardIds_ = other.huCardIds_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureHuCardIdsIsMutable();
            huCardIds_.addAll(other.huCardIds_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.sy599.game.msg.serverPacket.PlayCardReqMsg.BJPlayCardReq parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.sy599.game.msg.serverPacket.PlayCardReqMsg.BJPlayCardReq) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 cardIds = 1;
      private java.util.List<java.lang.Integer> cardIds_ = java.util.Collections.emptyList();
      private void ensureCardIdsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          cardIds_ = new java.util.ArrayList<java.lang.Integer>(cardIds_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 cardIds = 1;</code>
       *
       * <pre>
       *牌组id(如果是摆叫操作 第一个是打出的牌 后面的是摆叫的牌)
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardIdsList() {
        return java.util.Collections.unmodifiableList(cardIds_);
      }
      /**
       * <code>repeated int32 cardIds = 1;</code>
       *
       * <pre>
       *牌组id(如果是摆叫操作 第一个是打出的牌 后面的是摆叫的牌)
       * </pre>
       */
      public int getCardIdsCount() {
        return cardIds_.size();
      }
      /**
       * <code>repeated int32 cardIds = 1;</code>
       *
       * <pre>
       *牌组id(如果是摆叫操作 第一个是打出的牌 后面的是摆叫的牌)
       * </pre>
       */
      public int getCardIds(int index) {
        return cardIds_.get(index);
      }
      /**
       * <code>repeated int32 cardIds = 1;</code>
       *
       * <pre>
       *牌组id(如果是摆叫操作 第一个是打出的牌 后面的是摆叫的牌)
       * </pre>
       */
      public Builder setCardIds(
          int index, int value) {
        ensureCardIdsIsMutable();
        cardIds_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cardIds = 1;</code>
       *
       * <pre>
       *牌组id(如果是摆叫操作 第一个是打出的牌 后面的是摆叫的牌)
       * </pre>
       */
      public Builder addCardIds(int value) {
        ensureCardIdsIsMutable();
        cardIds_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cardIds = 1;</code>
       *
       * <pre>
       *牌组id(如果是摆叫操作 第一个是打出的牌 后面的是摆叫的牌)
       * </pre>
       */
      public Builder addAllCardIds(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardIdsIsMutable();
        super.addAll(values, cardIds_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cardIds = 1;</code>
       *
       * <pre>
       *牌组id(如果是摆叫操作 第一个是打出的牌 后面的是摆叫的牌)
       * </pre>
       */
      public Builder clearCardIds() {
        cardIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // optional int32 cardType = 2;
      private int cardType_ ;
      /**
       * <code>optional int32 cardType = 2;</code>
       *
       * <pre>
       *牌型
       * </pre>
       */
      public boolean hasCardType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 cardType = 2;</code>
       *
       * <pre>
       *牌型
       * </pre>
       */
      public int getCardType() {
        return cardType_;
      }
      /**
       * <code>optional int32 cardType = 2;</code>
       *
       * <pre>
       *牌型
       * </pre>
       */
      public Builder setCardType(int value) {
        bitField0_ |= 0x00000002;
        cardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cardType = 2;</code>
       *
       * <pre>
       *牌型
       * </pre>
       */
      public Builder clearCardType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        cardType_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 huCardIds = 3;
      private java.util.List<java.lang.Integer> huCardIds_ = java.util.Collections.emptyList();
      private void ensureHuCardIdsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          huCardIds_ = new java.util.ArrayList<java.lang.Integer>(huCardIds_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 huCardIds = 3;</code>
       *
       * <pre>
       *摆叫胡的牌组值(禁牌牌组)
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getHuCardIdsList() {
        return java.util.Collections.unmodifiableList(huCardIds_);
      }
      /**
       * <code>repeated int32 huCardIds = 3;</code>
       *
       * <pre>
       *摆叫胡的牌组值(禁牌牌组)
       * </pre>
       */
      public int getHuCardIdsCount() {
        return huCardIds_.size();
      }
      /**
       * <code>repeated int32 huCardIds = 3;</code>
       *
       * <pre>
       *摆叫胡的牌组值(禁牌牌组)
       * </pre>
       */
      public int getHuCardIds(int index) {
        return huCardIds_.get(index);
      }
      /**
       * <code>repeated int32 huCardIds = 3;</code>
       *
       * <pre>
       *摆叫胡的牌组值(禁牌牌组)
       * </pre>
       */
      public Builder setHuCardIds(
          int index, int value) {
        ensureHuCardIdsIsMutable();
        huCardIds_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 huCardIds = 3;</code>
       *
       * <pre>
       *摆叫胡的牌组值(禁牌牌组)
       * </pre>
       */
      public Builder addHuCardIds(int value) {
        ensureHuCardIdsIsMutable();
        huCardIds_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 huCardIds = 3;</code>
       *
       * <pre>
       *摆叫胡的牌组值(禁牌牌组)
       * </pre>
       */
      public Builder addAllHuCardIds(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureHuCardIdsIsMutable();
        super.addAll(values, huCardIds_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 huCardIds = 3;</code>
       *
       * <pre>
       *摆叫胡的牌组值(禁牌牌组)
       * </pre>
       */
      public Builder clearHuCardIds() {
        huCardIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.sy599.game.msg.serverPacket.BJPlayCardReq)
    }

    static {
      defaultInstance = new BJPlayCardReq(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.sy599.game.msg.serverPacket.BJPlayCardReq)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sy599_game_msg_serverPacket_PlayCardReq_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sy599_game_msg_serverPacket_PlayCardReq_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sy599_game_msg_serverPacket_BJPlayCardReq_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sy599_game_msg_serverPacket_BJPlayCardReq_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\032files/PlayCardReqMsg.proto\022\037com.sy599." +
      "game.msg.serverPacket\"D\n\013PlayCardReq\022\017\n\007" +
      "cardIds\030\001 \003(\005\022\020\n\010cardType\030\002 \001(\005\022\022\n\nextCa" +
      "rdIds\030\003 \003(\005\"E\n\rBJPlayCardReq\022\017\n\007cardIds\030" +
      "\001 \003(\005\022\020\n\010cardType\030\002 \001(\005\022\021\n\thuCardIds\030\003 \003" +
      "(\005"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_com_sy599_game_msg_serverPacket_PlayCardReq_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_com_sy599_game_msg_serverPacket_PlayCardReq_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_sy599_game_msg_serverPacket_PlayCardReq_descriptor,
              new java.lang.String[] { "CardIds", "CardType", "ExtCardIds", });
          internal_static_com_sy599_game_msg_serverPacket_BJPlayCardReq_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_com_sy599_game_msg_serverPacket_BJPlayCardReq_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_sy599_game_msg_serverPacket_BJPlayCardReq_descriptor,
              new java.lang.String[] { "CardIds", "CardType", "HuCardIds", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
